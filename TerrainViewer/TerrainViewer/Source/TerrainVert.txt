#version 400

// Input data
layout(location=0) in vec4 in_Position;
layout(location=1) in vec3 in_normal;
layout(location=2) in vec2 snowCoords;
layout(location=3) in vec2 rockCoords;
layout(location=4) in vec2 grassCoords;

uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;
uniform mat3 NormalsMatrix;

struct DirectionalLight
{
	vec3 color;
	float ambientIntensity;
	vec3 dir;
	float diffuseIntensity;
};

// Out data
smooth out vec3 vertNormal;
smooth out DirectionalLight light;
smooth out vec3 halfDir;
out vec2 snowUV;
out vec2 rockUV;
out vec2 grassUV;

// Using the blinn-phong model for lighting calculations
// Major difference between blinn-phong and phong is that we don't calculate a
// reflection vector, only the half vector between the eye and the light.
// Then we use that half vector in place of the reflection vector.

vec4 eyeSpaceVertPos;
void main(void)
{
	snowUV = snowCoords;
	rockUV = rockCoords;
	grassUV = grassCoords;

	light.color = vec3(1,1,1);
	light.ambientIntensity = .3f;
	light.dir = vec3(0, -.5, -1);
	light.dir = normalize(light.dir);
	light.diffuseIntensity = .6f;
	light.dir = normalize(light.dir);

	vertNormal = normalize(NormalsMatrix * in_normal);
	
	eyeSpaceVertPos = ViewMatrix * ModelMatrix * in_Position;

	// The half dir is calculated as follows:
	// light dir + eye dir. To calculate eye dir, we merely negate
	// the current vertex pos in eye space.
	// Since eye pos is (0,0,0) in eye space, that's all we need!
	halfDir = normalize(-light.dir + normalize(-eyeSpaceVertPos.xyz));

    gl_Position = (ProjectionMatrix ) * eyeSpaceVertPos;
}